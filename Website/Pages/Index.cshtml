@*
    * Author: Matthew Sinclair
    * Class name: Index.cshtml
    * Purpose: Creates an index page that display the menu and welcome message
*@
@page
@model IndexModel
@{
    ViewData["Title"] = "Home page";
}


<div class="text-center">
    <h1 class="display-4">Welcome To Bleakwind Buffet</h1>
    <p>
        We at Bleakwind Buffet are proud to bring you authentic fantasy meals straight from the world of Skyrim.
        Shake the blood off your sword and sake your thirst with one of our old-fashioned sailor sodas.
        Hack into a Smokehouse Skeleton with your dagger. Or vanquish the the mighty Thalmor Triple Burger!
        You’ve had a hard adventure and earned your loot, so spend it with us!
    </p>
    <h4 class="combo_mess">Combine an Entree, Side, and Drink to Make a Combo to Save $1</h4>
</div>

<form id="Menu-database">

    <div id="search">
        <input type="text" name="SearchTerms" value="@Model.searchTerms" />
        <input type="submit" value="Search">
    </div>

    <div id="filters">

        <h4>Item Type:</h4>
        @foreach (String types in @Model.itemTypes)
        {
            <label>
                <input type="checkbox" name="MenuItems" value="@types" checked="@Model.itemInclude.Contains(types)" />
                @types
            </label>
        }

        <h4>Price</h4>
        <div>
            Between
            <input name="PriceMin" type="number" min="0" max="100" step="0.01" placeholder="min" value="@Model.priceMin" />
            and
            <input name="PriceMax" type="number" min="0" max="100" step="0.01" placeholder="max" value="@Model.priceMax" />
        </div>

        <h4>Calories</h4>
        <div>
            Between
            <input name="CaloriesMin" type="number" min="0" max="1000" step="1" placeholder="min" value="@Model.caloriesMin" />
            and
            <input name="CaloriesMax" type="number" min="0" max="1000" step="1" placeholder="max" value="@Model.caloriesMax" />
        </div>

    </div>

    <div id="results">
        <h1>Menu Item Results</h1>

        <ul class="item-list">
            <h2>Entrees</h2>
            <ul class="entree-list">
                @foreach (IOrderItem item in @Model.MenuList)
                {
                    if (item is Entree)
                    {
                        <li>
                            <h3 class="name">@item.ToString()</h3>
                            <div class="price">Price: $@item.Price</div>
                            <div class="calories">Calories: @item.Calories</div>
                        </li>
                    }
                }
            </ul>

            <h2>Sides</h2>
            <ul class="side-list">
                @foreach (IOrderItem item in @Model.MenuList)
                {
                    @if ((item is Side s))
                    {
                        if (!Model.used.Contains(item.GetType().Name))
                        {
                            <li>
                                <h3 class="name">@item.ToString().Substring(item.ToString().IndexOf(' ') + 1)</h3>
                                <ul class="Size">
                                    @foreach (IOrderItem x in Model.ListExtractor(Model.MenuList, s))
                                    {
                                        s = x as Side;

                                        <li>
                                            <div class="size">@(s.Size)</div>
                                            <div class="price">Price: $@s.Price</div>
                                            <div class="calories">Calories: @s.Calories</div>
                                        </li>

                                    }
                                </ul>
                            </li>
                        }
                    }
                }
            </ul>

            <h2>Drinks</h2>
            <ul class="drink-list">
                @foreach (IOrderItem item in @Model.MenuList)
                {
                    @if ((item is Drink d))
                    {
                        if (!Model.used.Contains(item.GetType().Name))
                        {

                            <li>
                                @if ((d is SailorSoda ss) && ss.Flavor == SodaFlavor.Blackberry)
                                {
                                    <h3 class="name">@item.ToString().Substring(item.ToString().IndexOf(' ') + 11)</h3>
                                    <div class="flav">
                                        <h6>Flavors:</h6>
                                        <ul class="flavors">
                                            @foreach (SodaFlavor flavor in (Enum.GetValues(typeof(SodaFlavor))))
                                            {
                                                <li>
                                                    @flavor
                                                </li>
                                            }
                                        </ul>

                                    </div>
                                }
                                else
                                {
                                    <h3 class="name">@item.ToString().Substring(item.ToString().IndexOf(' ') + 1)</h3>
                                }
                            <ul class="Size">
                                @foreach (IOrderItem x in Model.ListExtractor(Model.MenuList, d))
                                {
                                    d = x as Drink;
                                    if((d is SailorSoda s) && s.Flavor != SodaFlavor.Blackberry)
                                    {
                                        continue;
                                    }
                                    <li>
                                        <div class="size">@(d.Size)</div>
                                        <div class="price">Price: $@d.Price</div>
                                        <div class="calories">Calories: @d.Calories</div>
                                    </li>
                                }
                                </ul>
                            </li>
                        }
                    }
                }
            </ul>
        </ul>
    </div>

</form>
